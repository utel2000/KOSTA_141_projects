package action;

import java.io.File;
import java.util.StringTokenizer;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;

import com.opensymphony.xwork2.ActionSupport;
import com.opensymphony.xwork2.ModelDriven;
import com.opensymphony.xwork2.Preparable;

import dao.GoodsDao;
import service.FileService;
import vo.GoodsVO;

public class UploadAction extends ActionSupport implements Preparable, ModelDriven<GoodsVO> {
	// input type="file" name="upload" 일 경우
	// 기본 파라미터가 추가로 2개 전송되어 온다. XXFileName, XXContentType
	private File upload;
	private String uploadFileName, uploadContentType;
	private String serverFullPath;
	// Form에서 전송되어온 파라미터를 vo로 한 번에 저장할 경우!
	// 반드시 Preparable, ModelDriven<GoodsVO> 인터페이스를 구현해야 한다.
	// 그러면 해당 인터셉터가 와서 처리를 하게 된다.
	private GoodsVO vo;
	// Preparable, ModelDriven, params 순으로 인터셉터가
	// 처리되고 하나의 인터셉터가 실행될 때 마다
	// Preparable ~> prepare()
	// ModelDriven ~> getModel()
	// params는 vo의 setter를 호출해서 값을 저장한다.
	public void prepare() {
		vo = new GoodsVO();
	}
	public GoodsVO getModel() {
		return vo;
	}
	@Override
	public String execute() throws Exception {		
		// log start
		StringBuffer log = new StringBuffer();
		System.out.println("<UploadAction.java> - public class UploadAction extends ActionSupport implements Preparable, ModelDriven<GoodsVO>");
		log.append("[Log] vo.getGname() : ").append(vo.getGname()).append("\n")
		.append("[Log] vo.getContent() : ").append(vo.getContent()).append("\n")
		.append("[Log] uploadFileName : ").append(uploadFileName).append("\n")
		.append("----------");
		System.out.println(log);
		log.delete(0, log.length());
		// log end
		
		StringBuffer fz = new StringBuffer();
		// a.gif 라면
		StringTokenizer fn = new StringTokenizer(uploadFileName, ".");
		// firstN이 a고
		String firstN = fn.nextToken();
		// lastN이 gif다.
		String lastN = fn.nextToken();
		fz.append(firstN).append(System.currentTimeMillis())
		.append(".").append(lastN);
		// upload, uploadFileName으로 되어 있기 때문에
		// 자동 매핑이 안되니까 아래처럼 불러서 사용.
		vo.setImg(fz.toString());
		GoodsDao.getDao().insertGoods(vo);
		
		// Action을 정의하는 방법을 3가지
		// 1. 생략, 2. Action 인터페이스, 3. ActionSupport를 상속.
		// UploadAction.properties에 file.path를 읽어 내기 위한
		// 메서드는 getText()를 사용하기 위해서 우리는
		// ActionSupport를 상속받은 것이다.
		String basePath = getText("file.path");
		FileService service = new FileService();
		serverFullPath = service.saveFile(upload,  basePath,  fz.toString());
		return SUCCESS;
	}
	public File getUpload() {
		return upload;
	}
	public void setUpload(File upload) {
		this.upload = upload;
	}
	public String getUploadFileName() {
		return uploadFileName;
	}
	public void setUploadFileName(String uploadFileName) {
		this.uploadFileName = uploadFileName;
	}
	public String getUploadContentType() {
		return uploadContentType;
	}
	public void setUploadContentType(String uploadContentType) {
		this.uploadContentType = uploadContentType;
	}
	public String getServerFullPath() {
		return serverFullPath;
	}
	public void setServerFullPath(String serverFullPath) {
		this.serverFullPath = serverFullPath;
	}
}

/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.0.M10
 * Generated at: 2016-12-01 09:11:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\t<!-- article 영역 시작 -->\r\n");
      out.write("\t<div id=\"article\">\r\n");
      out.write("\t\t<div id=\"header2\">\r\n");
      out.write("\t\t\t<h1>Article Heading ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${msg}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h1>\r\n");
      out.write("\t\t\t<p id=\"time\">Oct 1th, 2011</p>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<p>HTML5는 HTML의 차기 주요 제안 버전으로 월드 와이드 웹의 핵심 마크업 언어이다. 2004년 6월 Web\r\n");
      out.write("\t\t\tHypertext Application Technology Working Group(WHATWG)에서 웹 애플리케이션\r\n");
      out.write("\t\t\t1.0이라는 이름으로 세부 명세 작업을 시작하였다. 2010년 3월 현재 WHATWG의 현재 초안 표준 상태(Draft\r\n");
      out.write("\t\t\tStandard state)이며, W3C에서는 작업 초안 상태(Working Draft state)이다. HTML5는\r\n");
      out.write("\t\t\tHTML 4.01, XHTML 1.0, DOM Level 2 HTML에 대한 차기 표준 제안이다. 이것은 어도비 플래시나\r\n");
      out.write("\t\t\t마이크로소프트의 실버라이트, 썬의 자바FX와 같은 플러그인 기반의 인터넷 애플리케이션에 대한 필요를 줄이는 데 목적을 두고\r\n");
      out.write("\t\t\t있다.</p>\r\n");
      out.write("\t\t<div id=\"section1\">\r\n");
      out.write("\t\t\t<div id=\"header3\">\r\n");
      out.write("\t\t\t\t<h1>Section Heading</h1>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<p>HTML5 동영상 태그는 HTML5 초안 규격에서 소개된 마크업 언어 태그로 HTML 페이지의 동영상을\r\n");
      out.write("\t\t\t\t임베드(embed)하는 것을 지원해 준다. 2010년 4월, 어도비 플래시 플레이어는 유튜브와 같은 웹사이트에서 동영상을\r\n");
      out.write("\t\t\t\t포함하는데 널리 사용된다. 이것은 애플의 아이폰이나 아이패드와 같은 특정 브라우저를 제외하고는 대다수의 웹 브라우저에\r\n");
      out.write("\t\t\t\t어도비 플래시 플레이어가 설치되어 있기 때문이다. HTML5 동영상은 동영상 온라인을 보여주기 위한 새로운 표준 방식이 될\r\n");
      out.write("\t\t\t\t예정이었지만, 어떤 동영상 포맷이 동영상 태그에서 지원될 것인지 하는 것에 대한 합의 부족으로 방해를 받아왔다.</p>\r\n");
      out.write("\t\t\t<div id=\"footer1\">\r\n");
      out.write("\t\t\t\t<p>현재의 HTML5 초안 규격에는 동영상 태그에서 어떤 동영상 포맷을 브라우저가 지원해야 할 것인지를 명시해\r\n");
      out.write("\t\t\t\t\t두지 않았다. 따라서 브라우저는 그들이 적합하다고 생각되는 동영상 포맷을 마음대로 지원할 수 있다.</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"section2\">\r\n");
      out.write("\t\t\t<div id=\"header4\">\r\n");
      out.write("\t\t\t\t<h1>Section Heading</h1>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<p>월드 와이드 웹(World Wide Web, WWW, W3)은 인터넷에 연결된 컴퓨터들을 통해 사람들이 정보를\r\n");
      out.write("\t\t\t\t공유할 수 있는 전 세계적인 정보 공간을 말한다. 간단히 웹(Web)이라 부르는 경우가 많다. 이 용어는 인터넷과 동의어로\r\n");
      out.write("\t\t\t\t쓰이는 경우가 많으나 엄격히 말해 서로 다른 개념이다. 웹은 전자 메일과 같이 인터넷 상에서 동작하는 하나의 서비스일\r\n");
      out.write("\t\t\t\t뿐이다. 인터넷에서 HTTP 프로토콜, 하이퍼텍스트, HTML형식 등을 사용하여 그림과 문자를 교환하는 전송방식.\r\n");
      out.write("\t\t\t\t1993년 이래로 웹은 인터넷 구조의 절대적 위치를 차지하고 있다. 인터넷상의 정보를 하이퍼텍스트 방식과 멀티미디어\r\n");
      out.write("\t\t\t\t환경에서 검색할 수 있게 해주는 정보검색 시스템이다. 하이퍼텍스트 형식으로 표현된 인터넷상의 다양한 정보를 효과적으로\r\n");
      out.write("\t\t\t\t검색하는 시스템으로 전세계적으로 가장 널리 보급되어 있다.</p>\r\n");
      out.write("\t\t\t<div id=\"figure\">\r\n");
      out.write("\t\t\t\t<img src=\"resources/images/safari.png\" alt=\"Safari\"> <img\r\n");
      out.write("\t\t\t\t\tsrc=\"resources/images/chrome.png\" alt=\"Chrome\"> <img\r\n");
      out.write("\t\t\t\t\tsrc=\"resources/images/firefox.png\" alt=\"FireFox\"> <img\r\n");
      out.write("\t\t\t\t\tsrc=\"resources/images/ie.png\" alt=\"IE\"> <img\r\n");
      out.write("\t\t\t\t\tsrc=\"resources/images/opera.png\" alt=\"Opera\">\r\n");
      out.write("\t\t\t\t<p id=\"figcaption\">FigCaption: Safari, Chrome, FireFox, IE,\r\n");
      out.write("\t\t\t\t\tOpera</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<p>하이퍼텍스트는 웹 브라우저라 불리는 프로그램을 통해 웹 서버에서 \"문서\"나 웹 페이지등의 정보 조각을 읽어들여\r\n");
      out.write("\t\t\t\t컴퓨터 모니터에 출력하는 형태로 보이게 된다. 그러고 나서 사용자는 각 페이지에 있는 하이퍼링크를 따라 다른 문서로\r\n");
      out.write("\t\t\t\t이동하거나, 그 페이지를 서비스하고 있는 서버로 일련의 정보를 보낼 수도 있다. 하이퍼링크를 따라 이동하는 행위를 흔히 웹\r\n");
      out.write("\t\t\t\t서핑(web surfing, 문화어: 망유람) 또는 웹 브라우징이라 한다. 그리고 관련된 내용들이 모여있는 웹 페이지들의\r\n");
      out.write("\t\t\t\t집합을 웹 사이트라 한다.</p>\r\n");
      out.write("\t\t\t<div id=\"footer2\">\r\n");
      out.write("\t\t\t\t<p>월드 와이드 웹은 다음의 세가지 기능으로 요약할 수 있겠다. 첫번째 통일된 웹 자원의 위치 지정 방법 예를\r\n");
      out.write("\t\t\t\t\t들면 URL. 두번째 웹의 자원 이름에 접근하는 프로토콜(protocol) 예를 들면 HTTP, 자원들 사이를 쉽게 항해\r\n");
      out.write("\t\t\t\t\t할 수 있는 언어 예를 들면 HTML.</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div id=\"footer3\">Article Footer</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- article 영역 끝 -->\r\n");
      out.write("\t<div id=\"aside\">\r\n");
      out.write("\t\t<div id=\"header5\">\r\n");
      out.write("\t\t\t<h1>Siderbar Heading</h1>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<p>문서의 주 내용이 아닌 관련성이 낮은 내용들은 aside로 표시할 수 있다. 본문과 직접적으로 상관이 없는 관련\r\n");
      out.write("\t\t\t사이트 링크나 안내글, nav 요소의 그룹 등이 aside 요소로 기술 될 수 있다. 보통 블로그에서 좌우측 사이드바를\r\n");
      out.write("\t\t\t의미하는 것으로서 사이드바의 특성으로 볼때 필수적이지 않아서 표시를 해도 되고 안 해도 되는 내용들 또는 광고물같은 내용들이\r\n");
      out.write("\t\t\t자리할 수 있다.</p>\r\n");
      out.write("\t</div>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

package or.kosta.mvc.handler;

public class MySocketHandler extends TextWebSocketHandler {
	// 서버에 연결한 사용자들을 저장하는 리스트입니다.
	private List<WebSocketSession> connectedUsers;
	public MySocketHandler() {
		connectedUsers = new ArrayList<WebSocketSession>();
	}
	// 클라이언트 연결 후 실행되는 메서드
	// websocket.onopen에 의해서 호출될 때 감지됨
	
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		connectedUsers.add(session);
		System.out.println(session.getId() + "님이 접속했습니다.");
		System.out.println("연결ip: " + session.getRemoteAddress().getHostName());
		System.out.println("접속자 수: " + connectedUsers.size());
		System.out.println("-----------------------");
	}
	
	@Override
	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message) throws Exception {
		super.handleMessage(session, message);
		System.out.println("receive message1: " + message.toStrig());
		System.out.println("receive message2: " + message.getPayload());
		for(WebSocketSession sess : connectedUsers) {
			sess.sendMessage(new TextMessage(message.getPayload().toString());
			System.out.println("Test");
		}
		System.out.println("접속자수2: " + connectedUsers.size());
	}
	// 클라이언트가 서버와 연결을 끊었을 때 실행되는 메서드
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		connectedUsers.remove(session);
		for(WebSocketSession webSocketSession : connectedUsers) {
			if(!session.getId().equals(webSocketSession.getId())) {
				webSocketSession.sendMessage(
						new TextMessage(
								session.getRemoteAddress().getHostName() + "퇴장했습니다."));
			}
		}
		System.out.println("접속자수3: " + connectedUsers.size());
	}
	
}
